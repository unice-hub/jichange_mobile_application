import 'dart:developer';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:learingdart/core/api/endpoint_api.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

class ViewInvoice extends StatefulWidget {
  final String invoiceSno;
  const ViewInvoice({super.key, required this.invoiceSno});
  @override
  _ViewInvoiceState createState() => _ViewInvoiceState();
}

class _ViewInvoiceState extends State<ViewInvoice> {
  late Future<Invoice> invoice;

  @override
  void initState() {
    super.initState();
    invoice = fetchInvoiceData(); // Fetch data on initialization
  }

  Future<Invoice> fetchInvoiceData() async {
     final prefs = await SharedPreferences.getInstance();
         String token = prefs.getString('token') ?? ''; // Token from SharedPreferences

    final response = await http.post(Uri.parse(ApiEndpoints.getFindInvoice), //endppoint for find invoice
   
   headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization' :  'Bearer $token', //token
   },
   
    body: jsonEncode({
      'invoice_sno': widget.invoiceSno,
    }));

    if (response.statusCode == 200) {
      log('Response: ${response.body}');
      return Invoice.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Failed to load invoice data');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text('Invoice Details'),
        backgroundColor: Colors.grey[900],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Card(
          color: Colors.grey[850],
          elevation: 8,
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: FutureBuilder<Invoice>(
              future: invoice,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error 123: ${snapshot.error}', style: TextStyle(color: Colors.red)));
                } else {
                  final data = snapshot.data!;
                  return Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Invoice NÂ°', style: TextStyle(color: Colors.white, fontSize: 24)),
                      SizedBox(height: 10),
                      Text('Date issued: ${data.dateIssued}', style: TextStyle(color: Colors.white70)),
                      SizedBox(height: 20),
                      Text('Issued to: ${data.issuedTo}', style: TextStyle(color: Colors.white)),
                      SizedBox(height: 10),
                      Text('Issued by: ${data.issuedBy}', style: TextStyle(color: Colors.white)),
                      SizedBox(height: 20),
                      DataTable(
                        columns: [
                          DataColumn(label: Text('Description', style: TextStyle(color: Colors.white))),
                          DataColumn(label: Text('Quantity', style: TextStyle(color: Colors.white))),
                          DataColumn(label: Text('Unit Price', style: TextStyle(color: Colors.white))),
                          DataColumn(label: Text('Subtotal', style: TextStyle(color: Colors.white))),
                        ],
                        rows: data.items.map((item) {
                          return DataRow(cells: [
                            DataCell(Text(item.description, style: TextStyle(color: Colors.white70))),
                            DataCell(Text(item.quantity.toString(), style: TextStyle(color: Colors.white70))),
                            DataCell(Text('${item.unitPrice} TZS', style: TextStyle(color: Colors.white70))),
                            DataCell(Text('${item.subtotal} TZS', style: TextStyle(color: Colors.white70))),
                          ]);
                        }).toList(),
                      ),
                      SizedBox(height: 20),
                      Text('Total: ${data.total} TZS', style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                      SizedBox(height: 10),
                      Text('Generated by Biz Logic Solutions', style: TextStyle(color: Colors.white70)),
                    ],
                  );
                }
              },
            ),
          ),
        ),
      ),
    );
  }
}

class Invoice {
  final String dateIssued;
  final String issuedTo;
  final String issuedBy;
  final List<Item> items;
  final double total;

  Invoice({required this.dateIssued, required this.issuedTo, required this.issuedBy, required this.items, required this.total});

  factory Invoice.fromJson(Map<String, dynamic> json) {
    var itemsList = json['items'] as List;
    List<Item> items = itemsList.map((i) => Item.fromJson(i)).toList();

    return Invoice(
      dateIssued: json['dateIssued'],
      issuedTo: json['issuedTo'],
      issuedBy: json['issuedBy'],
      items: items,
      total: json['total'],
    );
  }
}

class Item {
  final String description;
  final int quantity;
  final double unitPrice;
  final double subtotal;

  Item({required this.description, required this.quantity, required this.unitPrice, required this.subtotal});

  factory Item.fromJson(Map<String, dynamic> json) {
    return Item(
      description: json['description'],
      quantity: json['quantity'],
      unitPrice: json['unitPrice'],
      subtotal: json['subtotal'],
    );
  }
}